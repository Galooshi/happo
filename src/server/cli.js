const crypto = require('crypto');

const commander = require('commander');

const S3Uploader = require('./S3Uploader');
const constructUrl = require('./constructUrl');
const initializeWebdriver = require('./initializeWebdriver');
const runVisualDiffs = require('./runVisualDiffs');
const server = require('./server');
const uploadLastResult = require('./uploadLastResult');

function logAndExit(error) {
  console.error(error);
  process.exit(1);
}

commander.command('debug').action(() => {
  server.start().then(() => {
    console.log(`=> ${constructUrl('/debug')}`);
  });
});

commander.command('run').action(() => {
  server.start().then(() => {
    initializeWebdriver().then((driver) => {
      runVisualDiffs(driver)
        .then(() => {
          driver.close();
          process.exit(0);
        })
        .catch((error) => {
          driver.close();
          logAndExit(error);
        });
    });
  });
});

commander.command('review').action(() => {
  server.start().then(() => {
    console.log(`=> ${constructUrl('/review')}`);
  });
});

commander.command('review-demo').action(() => {
  server.start().then(() => {
    console.log(`=> ${constructUrl('/review-demo')}`);
  });
});

commander.command('upload [<triggeredByUrl>]').option('--debug').action(
  (triggeredByUrl, { debug }) => {
    uploadLastResult(triggeredByUrl, { debug })
      .then((url) => {
        if (url) {
          console.log(url);
        }
      })
      .catch(logAndExit);
  });

commander.command('upload-test').option('--debug').action(({ debug }) => {
  const uploader = new S3Uploader({ debug });
  uploader.prepare()
    .then(() => {
      uploader.upload({
        body: 'Generated by `happo upload-test`',
        contentType: 'text/plain',
        contentEncoding: 'utf-8',
        fileName: `${crypto.randomBytes(16).toString('hex')}.txt`,
      }).then((url) => {
        console.log(url);
      });
    }).catch(logAndExit);
});

module.exports = function cli(argv) {
  commander.parse(argv);
  if (!argv.slice(2).length) {
    commander.outputHelp();
  }
};
