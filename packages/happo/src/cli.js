const crypto = require('crypto');

const commander = require('commander');
const {
  config,
  saveResultsToFile,
  constructUrl,
} = require('happo-core');
const initializeConfig = require('./initializeConfig');
const validateConfig = require('./validateConfig');
const { server, uploadLastResult } = require('happo-viewer');
const processSerially = require('./processSerially');

config.set(validateConfig(initializeConfig(process.env.HAPPO_CONFIG_FILE)));

function logAndExitWithFailure(error) {
  console.error(error);
  process.exit(1);
}

function exitWithSuccess() {
  process.exit(0);
}

function targetForName(name) {
  const target = config.get().targets.find(t => t.name === name);
  if (!target) {
    logAndExitWithFailure(new Error(`Target ${name} not found.`));
  }
  return target;
}

commander.command('run [<target>]').action((targetName) => {
  let resultPromise;
  if (targetName) {
    resultPromise = targetForName(targetName).run();
  } else {
    resultPromise = processSerially(config.get().targets, target => target.run())
      .then(results => results.reduce((a, b) => a.merge(b)));
  }

  return resultPromise
    .then(saveResultsToFile)
    .then(exitWithSuccess)
    .catch(logAndExitWithFailure);
});

commander.command('review').action(() => {
  server.start(config.get()).then(() => {
    console.log(`=> ${constructUrl('/review')}`);
  });
});

commander.command('debug <target>').action((target) => {
  targetForName(target).debug();
});

commander.command('review-demo').action(() => {
  // server.start().then(() => {
  //   console.log(`=> ${constructUrl('/review-demo')}`);
  // });
});

commander.command('upload [<triggeredByUrl>]').action(
  (triggeredByUrl) => {
    uploadLastResult(triggeredByUrl)
      .then((url) => {
        if (url) {
          console.log(url);
        }
      })
      .catch(logAndExitWithFailure);
  });

commander.command('upload-test').action(() => {
  const uploader = config.get().uploader();
  uploader.prepare()
    .then(() => {
      uploader.upload({
        body: 'Generated by `happo upload-test`',
        contentType: 'text/plain',
        contentEncoding: 'utf-8',
        fileName: `${crypto.randomBytes(16).toString('hex')}.txt`,
      }).then((url) => {
        console.log(url);
      });
    }).catch(logAndExitWithFailure);
});

module.exports = function cli(argv) {
  commander.parse(argv);
  if (!argv.slice(2).length) {
    commander.outputHelp();
  }
};
